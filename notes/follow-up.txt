composer create-project laravel/laravel multi "8.5.*"

npm install bootstrap
npm install sass
npm install sass-loader

create (if not created) resources/sass/app.scss and add:
@import '~bootstrap';

add compilation in webpack.mix.js:
mix.sass('resources/sass/app.scss', 'public/css')

mix.js('resources/js/app.js', 'public/js')
   .sass('resources/sass/app.scss', 'public/css')
   .options({
      processCssUrls: false,
      postCss: [ require('autoprefixer') ],
   })
   .webpackConfig({
      stats: {
         children: true
      }
   });

use it in templates with asset:
<link href="{{ asset('css/app.css') }}" rel="stylesheet">

php artisan storage:link
for windows in cmd "browse" to the public folder
mklink /D storage ..\storage\app\public

composer require laravel/ui
php artisan ui bootstrap
npm install && npm run dev
php artisan ui bootstrap --auth
npm install && npm run dev

composer require spatie/laravel-sluggable
composer require intervention/image

in app.php in config
'providers' => [
	Collective\Html\HtmlServiceProvider::class,
	Intervention\Image\ImageServiceProvider::class,
'aliases'=> [
	'Form' => Collective\Html\FormFacade::class,
	'Html' => Collective\Html\HtmlFacade::class,
	'Image' => Intervention\Image\Facades\Image::class,

composer require spatie/laravel-permission
php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"

then in the kenel
'role' => \Spatie\Permission\Middleware\RoleMiddleware::class,
'permission' => \Spatie\Permission\Middleware\PermissionMiddleware::class,
'role_or_permission' => \Spatie\Permission\Middleware\RoleOrPermissionMiddleware::class,

Add to appserviceprovider for pagination
use Illuminate\Pagination\Paginator;
public function boot()
{
     Paginator::useBootstrap();
}

php artisan make:model Admin -m
php artisan make:model Country -m
php artisan make:model CountryUsers -m

# products
php artisan make:model ProductTypes -m
php artisan make:model ProductSizes-m
php artisan make:model ProductColors -m
php artisan make:model ProductMaterials -m
php artisan make:model ProductCategories -m
php artisan migrate
php artisan make:model Products -m -c
php artisan migrate
php artisan make:model ProductImages -m
php artisan migrate
php artisan make:model ProductProductTypes -m
php artisan make:model ProductProductSizes-m
php artisan make:model ProductProductColors -m
php artisan make:model ProductProductMaterials -m
php artisan make:model ProductProductCategories -m
php artisan make:model ProductProductImages -m

# Blogs
php artisan make:model BlogCategories -m
php artisan migrate
php artisan make:model Blogs -m
php artisan migrate
php artisan make:model BlogImages -m
php artisan migrate
php artisan make:model BlogBlogCategories -m
php artisan make:model BlogBlogImages -m

# checkout
php artisan make:model Cart
php artisan make:model Orders -m
php artisan make:model Order_Items -m

# profile
php artisan make:model WishList -m
php artisan make:model Contacts -m

php artisan make:model Prices -m
php artisan make:model Comments -m
php artisan make:model Ratings -m
php artisan make:model VisitorData -m
php artisan make:model VisitorJourney -m

php artisan migrate

php artisan make:controller CheckoutController
php artisan make:controller PricesController -r
php artisan make:controller PagesController
php artisan make:controller ProfileController -r
php artisan make:controller RatingsController -r

php artisan make:controller Admin/Auth/AdminAuthController
php artisan make:controller Admin/AdminController -r

php artisan make:controller Admin/BlogController -r
php artisan make:controller Admin/BlogCategoryController -r
php artisan make:controller Admin/BlogImageController -r

php artisan make:controller Admin/CommentsController -r
php artisan make:controller Admin/ContactsController -r

php artisan make:controller Admin/ProductColorController -r
php artisan make:controller Admin/ProductCategoryController -r
php artisan make:controller Admin/ProductMaterialController -r
php artisan make:controller Admin/ProductImageController -r
php artisan make:controller Admin/ProductsController -r
php artisan make:controller Admin/ProductSizeController -r
php artisan make:controller Admin/ProductTypeController -r

php artisan make:controller Admin/OrdersController -r
php artisan make:controller Admin/OrderItemsController -r

php artisan make:controller Admin/ContactController -r
php artisan make:controller Admin/PermissionsController -r
php artisan make:controller Admin/RolesController -r

php artisan make:controller Admin/PricesController -r

php artisan make:controller Admin/UserController -r
php artisan make:controller Admin/UserManagentController -r

php artisan make:controller Admin/DashboardController -r

# Product seeder
php artisan make:seeder ProductCategoriesSeeder
php artisan make:seeder ProductSizesSeeder
php artisan make:seeder ProductTypesSeeder
php artisan make:seeder ProducColorsSeeder
php artisan make:seeder ProducMaterialsSeeder

# Roles and permissions
php artisan make:seeder RolesandPermissionsSeeder

# Blog seeder
php artisan make:seeder BlogCatogoriesSeeder

# Price seeder
php artisan make:seeder PricesTypeSeeder

# Triggers
php artisan make:seeder CreatePricesTrigerSeeder
php artisan make:seeder CreatePricesUpdateTrigerSeeder

# Mirrors
php artisan make:seeder CreateUserMirrorSeeder
php artisan make:seeder CreateBlogsMirrorSeeder
php artisan make:seeder CreateProductsMirrorSeeder
php artisan make:seeder CreateFailedJobsMirrorSeeder
php artisan make:seeder CreateOrdersMirrorSeeder
php artisan make:seeder CreatePasswordResetTokensMirrorSeeder
php artisan make:seeder CreatePersonalAccessTokensMirrorSeeder
php artisan make:seeder CreateWishListMirrorSeeder

php artisan make:middleware AdminAuthenticated

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
+++++++++++++++++++++++++++++++++++++++++ CURRENTLY HERE ++++++++++++++++++++++++++++++++++++++++++
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

in auth add this
'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
        'admin' => [
            'driver' => 'session',
            'provider' => 'admins',
        ],
    ],
 
 'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],
        'admins' => [
            'driver' => 'eloquent',
            'model' => App\Models\Admin::class,
        ],
    ],

------------------------------------------------------------------------------------
-------------------------------Emails-------------------------------
------------------------------------------------------------------------------------

In order to use email for verification and others

web.php
Auth::routes(['verify' => true]);
Route::get('/home', [HomeController::class, 'index'])
->middleware(['auth', 'verified'])
->name('home');

# then in the user model
class User extends Authenticatable implements MustVerifyEmail
{
    use Notifiable;
    // Your model code
}

# email for user section
php artisan make:mail newAccount --markdown=emails.newAccount
php artisan make:mail newCheckout --markdown=emails.newCheckout
php artisan make:mail newComment --markdown=emails.newComment
php artisan make:mail newRating --markdown=emails.newRating
php artisan make:mail newWishlist --markdown=emails.newWishlist
php artisan make:mail newContact --markdown=emails.newContact
php artisan make:mail orderApproval --markdown=emails.orderApproval

# email for admin section
php artisan make:mail newPost --markdown=emails.newPost
php artisan make:mail newBlog --markdown=emails.newBlog

# Publish the mailers
php artisan vendor:publish --tag=laravel-mail

Auth::routes(['verify' => true]);
Route::get('/home', [HomeController::class, 'index'])
->middleware(['auth', 'verified'])
->name('home');

for the use of counties
composer require wisdom-diala/countrypkg-laravel
php artisan vendor:publish --tag=country_flags 
php artisan migrate
php artisan g:c
php artisan g:s all

https://github.com/wisdom-diala/countrypkg-laravel
if states are needed you can get cdn fo jquery and write the following script
<script>
    $(document).ready(function(){
        $("#country").change(function(){
            let country_id = this.value;
            $.get('/get_state?country=',*country_id function(data){
                $('#state').html(data);
            })
        })
    })
</script>

------------------------------------------------------------------------------------
-------------------------------------sitemap----------------------------------------
------------------------------------------------------------------------------------


composer require spatie/laravel-sitemap
php artisan vendor:publish --provider="Spatie\Sitemap\SitemapServiceProvider" --tag=sitemap-config

Create a command or controller to generate the sitemap dynamically
use Spatie\Sitemap\Sitemap;
use Spatie\Sitemap\Tags\Url;

class SitemapController extends Controller
{
    public function generate()
    {
        // Create a new sitemap
        $sitemap = Sitemap::create();

        // Add dynamic URLs (e.g., products)
        $products = Product::all();
        foreach ($products as $product) {
            $sitemap->add(Url::create(route('product.show', $product->id))
                ->setLastModificationDate($product->updated_at)
                ->setChangeFrequency('weekly')
                ->setPriority(0.8));
        }

        // Add dynamic URLs (e.g., blogs)
        $blogs = Blog::all();
        foreach ($blogs as $blog) {
            $sitemap->add(Url::create(route('blog.show', $blog->id))
                ->setLastModificationDate($blog->updated_at)
                ->setChangeFrequency('monthly')
                ->setPriority(0.6));
        }

        // Save the sitemap to a public location
        $sitemap->writeToFile(public_path('sitemap.xml'));

        return response()->json(['message' => 'Sitemap generated successfully!']);
    }
}

Route::get('/sitemap.xml', function () {
    return response()->file(public_path('sitemap.xml'));
});

Step 4: Register Sitemap with Search Engines
Submit your sitemap to Google Search Console and other search engines:
URL: https://yourdomain.com/sitemap.xml

Automate Sitemap Updates
use Illuminate\Console\Command;
use Spatie\Sitemap\Sitemap;
use Spatie\Sitemap\Tags\Url;

class GenerateSitemap extends Command
{
    protected $signature = 'sitemap:generate';
    protected $description = 'Generate the sitemap.xml file';

    public function handle()
    {
        $sitemap = Sitemap::create();

        // Add dynamic URLs (e.g., products)
        $products = Product::all();
        foreach ($products as $product) {
            $sitemap->add(Url::create(route('product.show', $product->id)));
        }

        // Add other dynamic URLs (e.g., blogs)
        $blogs = Blog::all();
        foreach ($blogs as $blog) {
            $sitemap->add(Url::create(route('blog.show', $blog->id)));
        }

        $sitemap->writeToFile(public_path('sitemap.xml'));
        $this->info('Sitemap generated successfully.');
    }
}

Register the job in app/Console/Kernel.php to run daily:

php
Copy code
protected function schedule(Schedule $schedule)
{
    $schedule->command('sitemap:generate')->daily();
}


------------------------------------------------------------------------------------
-------------------------------------Whatsapp----------------------------------------
------------------------------------------------------------------------------------

Think of a service section

    protected function sendRequest($url, $params = [])
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_POST, true);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HTTPHEADER, [
            'Content-Type: multipart/form-data'
        ]);

        $response = curl_exec($ch);
        curl_close($ch);

        return $response;
    }



    public function sendPhoto(array $params)
    {
        $url = $this->telegramApiUrl . 'sendPhoto';

        $defaultParams = [
            'chat_id' => '',
            'photo' => '',
            'caption' => '',
            // Add more parameters as needed
        ];

        $params = array_merge($defaultParams, $params);

        return $this->sendRequest($url, $params);
    }


create a command to market image and text.

public function handle()
    {
        try {
            // Fetch a random post from the database
            $post = Posts::inRandomOrder()->first();
            if ($post->image) {
                // Define the array of chat IDs
                $chatIds = explode(',', env('CHAT_ID', ''));
                // Iterate over each chat ID and send the post
                foreach ($chatIds as $chatId) {
                    $chatId = trim($chatId); // Trim any whitespace
                    if ($post->image) {
                        $caption = trim($post->caption);
                        $image = trim($post->image);
                        $imageUrl = asset('storage/app/public/posts/' . $image);
                        // Ensure $post->caption is not empty
                        $caption = trim($post->caption) ?: 'No caption provided';
                        $this->telegramService->sendPhoto([
                            'chat_id' => $chatId,
                            'photo' => new CURLFile($imageUrl),
                            'caption' => $caption,
                        ]);
                    } else {
                        
                        $text = trim($post->caption) ?: 'No content provided';
                        $this->telegramService->sendMessage([
                            'chat_id' => $chatId,
                            'text' => $text,
                        ]);
                    }
                }
                return 0;
            } else {
                return 0;
            }
        } catch (Exception $e) {
            $this->error('There was an error sending post to Telegram: ' . $e->getMessage());
            return 1;
        }
    }


register the command in the kernel.

    protected function schedule(Schedule $schedule)
    {
        // $schedule->command('inspire')->hourly();
        $schedule->command('telegram:post')->cron('0 0,5-23 * * *');
        $schedule->command('telegram:link')->cron('30 0,5-23 * * *');
    }